{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a5e7325d",
   "metadata": {},
   "source": [
    "## Introduction to Jupyter\n",
    "\n",
    "Welcome to Jupyter! In case you haven't seen a notebook interface like this before, I will quickly explain how they work here. If you're already experienced with this type of interface, feel free to skip ahead (to the section called **Brownian particle simulations**).\n",
    "\n",
    "When you have written code in the past, you have probably used an Integrated Development Environment (IDE) such as Idle or Spyder. These are great for building programs when we know from the outset exactly what we want to do. However, in scientific computing, we often want to experiment with many different approaches to the same challenge. It then becomes critically important a) that we can easily compare the outcome of these different approaches, and b) that we can accurately record the thought processes that led to each approach.\n",
    "\n",
    "Notebook interfaces help with this problem by combining word processing and programming into a single package. The word processing capabilities allow you to store complex documentation with your code, including $\\LaTeX$-quality equation typesetting:\n",
    "\n",
    "$$F = m\\frac{d^{2}x}{dt^{2}}$$\n",
    "\n",
    "and the ability to embed images:\n",
    "\n",
    "![Jupyter](Figs/jupyter.png)\n",
    "\n",
    "Later, we will also see how we can generate plots with our code as part of the document.\n",
    "\n",
    "In Jupyter, everything is written within *cells*. Cells come in two main flavours: **markdown** (which is what this section is written in) and **code** (where you will be editing your python scripts). You can insert new cells where they are needed and easily move cells around, allowing you to easily restructure document as needed. Clicking the **run** button at the top of the screen has a different effect depending on the type of cell currently selected:\n",
    "\n",
    "  * If a **markdown** cell, the markdown within will be converted into nicely formatted text.\n",
    "  * If a **code** cell, the code in it will be executed.\n",
    " \n",
    "The cell below is a code cell. Try clicking on it to select it and then press 'Run' to execute its contents."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04e156a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Hello world\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e07426c9",
   "metadata": {},
   "source": [
    "Note that variables, class/function definitions etc. are persistent between code blocks. This allows you split complex scripts into as many parts as you need. For example, we can define the variable 'MOE' in one code cell:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d2c7e4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "MOE = 42"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd27d845",
   "metadata": {},
   "source": [
    "And then print it in a separate cell:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "078d9367",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(MOE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1d01c16",
   "metadata": {},
   "source": [
    "We do have to be careful to define things in the correct order, though. For example, running the two cells below in order will result in an error (although running them backwards won't!):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73000414",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(unliked)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1e9f9bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "unliked = \"Green eggs and ham\""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
